name: 'CMake ready reusable action made by Lohk'
description: 'Made to build CMake projects for Linux, Windows and/or MacOS'
inputs:
  build_configuration:
    description: 'Release or Debug?'
    required: false
    default: 'Release'
  checkout:
    description: 'Should this checkout the project automagically?'
    required: false
    default: 'false'
  project_path:
    description: 'Project path to work on?'
    required: false
  upload_logs:
    description: 'Upload logs?'
    required: false
    default: 'false'
  artifact_name:
    description: 'How to name this project outputs as Artifacts? (Logs will be called (this)_logs)'
    required: true
  extra_flags:
    description: 'Put more flags to cmake build? (like "--trace")'
    required: false
    default: ''
  use_vcpkg:
    description: 'Downloads, builds latest vcpkg and installs it'
    required: false
    default: 'false'
    
  
runs:
  using: composite
  steps:
    - name: Put title for summary
      shell: bash
      run: |
        echo "## 🌝 LunarisLib/actions/CMake" >> $GITHUB_STEP_SUMMARY

        echo "*This is the log output for this action:*" >> $GITHUB_STEP_SUMMARY
        echo "- Kind of build: ${{ inputs.build_configuration }}" >> $GITHUB_STEP_SUMMARY
        echo "- Project path: ${{ inputs.project_path }}" >> $GITHUB_STEP_SUMMARY
        echo "- Artifact name: ${{ inputs.artifact_name }}" >> $GITHUB_STEP_SUMMARY

    - name: Checkout if requested
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@main
      with:
        submodules: 'true'
        
    - name: Setup MSVC if needed (automatic)
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64
      
    - name: Using VCPKG
      if: ${{ inputs.use_vcpkg == 'true' }}
      shell: bash
      env:
        WORK_PATH: ${{ inputs.project_path }}
      run: |
        PROJECT_PATH='${{ github.workspace }}'"/$WORK_PATH/"
        echo "- Using VCPKG!" >> $GITHUB_STEP_SUMMARY


        echo "Cloning vcpkg to "'${{ github.workspace }}'"/vcpkg"

        git clone https://github.com/microsoft/vcpkg.git '${{ github.workspace }}'/vcpkg
                
        echo "VCPKG_ROOT=\""'${{ github.workspace }}'"/vcpkg\"" >> $GITHUB_ENV
        echo '${{ github.workspace }}'"/vcpkg" >> $GITHUB_PATH

        echo "Current GITHUB_PATH: $GITHUB_PATH"
        echo "Current PATH: $PATH"
        echo "Setup..."

        cd '${{ github.workspace }}'/vcpkg
        
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then

          ./bootstrap-vcpkg.sh -disableMetrics
          export PATH='${{ github.workspace }}'"/vcpkg:$PATH"

        elif [ "${{ matrix.os }}" == "macos-latest" ]; then

          ./bootstrap-vcpkg.sh -disableMetrics
          export PATH='${{ github.workspace }}'"/vcpkg:$PATH"

        elif [ "${{ matrix.os }}" == "windows-latest" ]; then

          ./bootstrap-vcpkg.bat -disableMetrics
          export PATH='${{ github.workspace }}'"/vcpkg;$PATH"

        fi

        echo "Installing packages..."

        cd $PROJECT_PATH
        '${{ github.workspace }}'/vcpkg/vcpkg install 2>&1 | tee runner.txt -a;
        cd '${{ github.workspace }}'

        echo "Environment export (hopefully it works)..."
        
        export CMAKE_TOOLCHAIN_FILE='${{ github.workspace }}'"/vcpkg/scripts/buildsystems/vcpkg.cmake"
        echo "CMAKE_TOOLCHAIN_FILE="'${{ github.workspace }}'"/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

        echo "Good!"

    - name: Build Cmake manually
      shell: bash
      env:
        BUILD_DIR: build/${{ inputs.artifact_name }}
        OUTPUT_DIR: built_executables/${{ inputs.artifact_name }}
        LOGS_DIR: logs/${{ inputs.artifact_name }}
        BUILD_TYPE: ${{ inputs.build_configuration }}
        WORK_PATH: ${{ inputs.project_path }}
      run: |
        cd $WORK_PATH
        
        if [[ ${{ runner.os }} == "Windows" ]]; then
            P_BUILD=$(echo "${{ runner.workspace }}" | sed 's/\\/\//g')/$BUILD_DIR
            P_EXECS=$(echo "${{ runner.workspace }}" | sed 's/\\/\//g')/$OUTPUT_DIR
            P_LOGGS=$(echo "${{ runner.workspace }}" | sed 's/\\/\//g')/$LOGS_DIR
            CC=cl
            CXX=cl
        elif [[ ${{ runner.os }} == "macOS" ]]; then
            P_BUILD=${{ runner.workspace }}/$BUILD_DIR;
            P_EXECS=${{ runner.workspace }}/$OUTPUT_DIR;
            P_LOGGS=${{ runner.workspace }}/$LOGS_DIR;

            CC=clang
            CXX=clang++
        else
            P_BUILD=${{ runner.workspace }}/$BUILD_DIR;
            P_EXECS=${{ runner.workspace }}/$OUTPUT_DIR;
            P_LOGGS=${{ runner.workspace }}/$LOGS_DIR;

            CC=gcc
            CXX=g++
        fi    
        
        echo "Cleaning up paths [$P_BUILD; $P_EXECS, $P_LOGGS]";
        rm -rf $P_BUILD;
        rm -rf $P_EXECS;
        rm -rf $P_LOGGS;

        echo "(Re)Creating paths [$P_BUILD; $P_EXECS, $P_LOGGS]";
        mkdir -p $P_BUILD;
        mkdir -p $P_EXECS;
        mkdir -p $P_LOGGS;

        echo "Preparing CMake..."

        cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DRUNTIME_OUTPUT_DIRECTORY="$P_EXECS" -DCMAKE_C_COMPILER="$CC" -DCMAKE_CXX_COMPILER="$CXX" -S . -B "$P_BUILD" --debug-output 2>&1 | tee runner.txt -a;
                
        echo "Running build CMake..."

        if [[ ${{ runner.os }} == "Windows" ]]; then 
            cmake --build "$P_BUILD" --target ALL_BUILD --config $BUILD_TYPE ${{ inputs.extra_flags }} -v 2>&1 | tee runner.txt -a;
            
            cp $P_BUILD/*/*.exe "$P_EXECS/";
        else 
            cmake --build $P_BUILD ${{ inputs.extra_flags }} -v 2>&1 | tee runner.txt -a;

            cat runner.txt | grep Built | awk '{print $NF}' > execs.txt;
            cp execs.txt ${{ runner.workspace }}/logs  

            for file in $(<execs.txt); do
              cp "$P_BUILD/$file" "$P_EXECS/";
            done;
        fi

        cp runner.txt "$P_LOGGS/"
        
        echo "End!"

    - name: Save build
      uses: actions/upload-artifact@main
      with:
        name: ${{ inputs.artifact_name }}
        path: ${{ runner.workspace }}/built_executables/${{ inputs.artifact_name }}/

    - if: ${{ inputs.upload_logs == 'true' && always() }}
      name: Save logs
      uses: actions/upload-artifact@main
      with:
        name: ${{ inputs.artifact_name }}_logs
        path: ${{ runner.workspace }}/logs/${{ inputs.artifact_name }}/
        
    - name: Finish summary with happy ending
      if: success()
      shell: bash
      run: |
        echo "#### The run ended with no issues ;P" >> $GITHUB_STEP_SUMMARY
    - name: Log errors if no success instead
      if: failure()
      shell: bash
      run: |
        # Just to be sure no errors here
        touch runner.txt

        echo "#### The run ended with issues! Check the log!" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        cat runner.txt >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY