name: 'CMake ready reusable action made by Lohk'
description: 'Made to build CMake projects for Linux, Windows and/or MacOS'
inputs:
  build_configuration:
    description: 'Release or Debug?'
    required: false
    default: 'Release'
  checkout:
    description: 'Should this checkout the project automagically?'
    required: false
    default: 'true'
  project_path:
    description: 'Project path to work on?'
    required: false
    default: '.'
  upload_logs:
    description: 'Upload logs?'
    required: false
    default: 'true'
  artifact_name:
    description: 'How to name this project outputs as Artifacts? (Logs will be called (this)_logs)'
    required: true
  extra_flags:
    description: 'Put more flags to cmake build? (like "--trace")'
    required: false
    default: ''
  use_vcpkg:
    description: 'Downloads, builds latest vcpkg and installs it'
    required: false
    default: 'false'
  debug_everything:
    description: 'Upload all files to check what''s going on'
    required: false
    default: 'false'


env:
  LOG_TXT: '${{ github.workspace }}/____internal_logs.log'
  MAKE_TXT: '${{ github.workspace }}/____internal_exec_logs.log'
  BUILD_DIR: '${{ github.workspace }}/build_dir'
  OUTPUT_DIR: '${{ github.workspace }}/output_dir'
  
runs:
  using: composite
  steps:
    - name: Put title for summary
      working-directory: ${{ inputs.project_path }}
      shell: bash
      run: |
        echo ============================== STEP: Summary and build setup ==============================
        echo "## 🌝 LunarisLib/actions/CMake" >> $GITHUB_STEP_SUMMARY

        echo "*This is the log output for this action:*" >> $GITHUB_STEP_SUMMARY
        echo "- Kind of build: ${{ inputs.build_configuration }}" >> $GITHUB_STEP_SUMMARY
        echo "- Project path: ${{ inputs.project_path }}" >> $GITHUB_STEP_SUMMARY
        echo "- Artifact name: ${{ inputs.artifact_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Running on: ${{ runner.name }}" >> $GITHUB_STEP_SUMMARY
        echo "- (debug) Logs at: $LOG_TXT" >> $GITHUB_STEP_SUMMARY
        echo "- (debug) CMake logs at: $MAKE_TXT" >> $GITHUB_STEP_SUMMARY
        echo "- (debug) Build dir: $BUILD_DIR" >> $GITHUB_STEP_SUMMARY
        echo "- (debug) Output dir: $OUTPUT_DIR" >> $GITHUB_STEP_SUMMARY

    - name: Checkout if requested
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@main
      with:
        submodules: 'true'

    - name: Setup environment variables
      working-directory: ${{ inputs.project_path }}
      shell: bash
      run: |
        echo ============================== STEP: Check and setup environment ==============================
        
        echo "🔶 Checking for CMakeLists.txt ..." 2>&1 | tee $LOG_TXT -a

        if [[ ! -e "CMakeLists.txt" ]]; then
          echo "CMakeLists.txt not found!!!"
          exit 1
        fi        

        echo "🔶 Setting up environment stuff..." 2>&1 | tee $LOG_TXT -a

        PROJECT_PATH=$PWD
        ROOT_PATH='${{ github.workspace }}'
        VCPKG_ROOT=$ROOT_PATH"/____internal_vcpkg"

        echo "🔶 Starting log from here!" 2>&1 | tee $LOG_TXT -a
  
        if [[ "${{ inputs.use_vcpkg }}" == "true" ]]; then
          echo "🔶 USE_VCPKG enabled, set up TOOLCHAIN_ARGUMENT value" 2>&1 | tee $LOG_TXT -a
          TOOLCHAIN_ARGUMENT=-DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT"/scripts/buildsystems/vcpkg.cmake"
        fi


        if [[ "${{ inputs.use_vcpkg }}" == "true" ]]; then
          echo "🔶 Working on CMakeLists.txt for VCPKG integration..." 2>&1 | tee $LOG_TXT -a
          
          echo "if (WIN32)" >> CMakeLists_new.txt
          echo "  set(VCPKG_TARGET_TRIPLET \"x64-windows\" CACHE STRING \"\")" >> CMakeLists_new.txt
          echo "elseif(UNIX AND NOT APPLE)" >> CMakeLists_new.txt
          echo "  set(VCPKG_TARGET_TRIPLET \"x64-linux\" CACHE STRING \"\")" >> CMakeLists_new.txt
          echo "else()" >> CMakeLists_new.txt
          echo "  if(CMAKE_SYSTEM_PROCESSOR STREQUAL \"arm64\")" >> CMakeLists_new.txt
          echo "    set(VCPKG_TARGET_TRIPLET \"arm64-osx\" CACHE STRING \"\")" >> CMakeLists_new.txt
          echo "  else()" >> CMakeLists_new.txt
          echo "    set(VCPKG_TARGET_TRIPLET \"x64-osx\" CACHE STRING \"\")" >> CMakeLists_new.txt
          echo "  endif()" >> CMakeLists_new.txt
          echo "endif()" >> CMakeLists_new.txt

          cat CMakeLists.txt >> CMakeLists_new.txt

          mv CMakeLists.txt CMakeLists_old.txt
          mv CMakeLists_new.txt CMakeLists.txt

          echo "🔶 CMakeLists.txt ready." 2>&1 | tee $LOG_TXT -a
        fi
        
    - name: Setup MSVC (automatic)
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64
      
    - name: Install VCPKG
      if: ${{ inputs.use_vcpkg == 'true' }}
      shell: bash
      run: |
        echo ============================== STEP: Install VCPKG automatically ==============================

        echo "🔶 Using VCPKG!" 2>&1 | tee $LOG_TXT -a

        if [[ -d $VCPKG_ROOT ]]; then
          echo "🔶 Found "$VCPKG_ROOT" folder. Cleaning it for self install instead!" 2>&1 | tee $LOG_TXT -a

          rm -rf $VCPKG_ROOT
        fi

        echo "🔶 Cloning vcpkg to "$VCPKG_ROOT 2>&1 | tee $LOG_TXT -a

        git clone https://github.com/microsoft/vcpkg.git $VCPKG_ROOT

        echo "🔶 Setting up vcpkg..."  2>&1 | tee $LOG_TXT -a

        if [[ ${{ runner.os }} == "Windows" ]]; then
          $VCPKG_ROOT/bootstrap-vcpkg.bat -disableMetrics
        else
          $VCPKG_ROOT/bootstrap-vcpkg.sh -disableMetrics
        fi

        echo "🔶 Installing vcpkg packages..." 2>&1 | tee $LOG_TXT -a

        $VCPKG_ROOT/vcpkg install 2>&1 | tee $MAKE_TXT -a
        
        echo "🔶 vcpkg good!" 2>&1 | tee $LOG_TXT -a

    - name: Build Cmake manually
      shell: bash
      working-directory: ${{ inputs.project_path }}
      env:
        BUILD_TYPE: ${{ inputs.build_configuration }}
        WORK_PATH: ${{ inputs.project_path }}
      run: |
        echo ============================== STEP: Building CMake ==============================
        
        echo "🔶 Cleaning up paths "$BUILD_DIR" and "$OUTPUT_DIR 2>&1 | tee $LOG_TXT -a
        rm -rf $BUILD_DIR
        rm -rf $OUTPUT_DIR

        echo "🔶 (Re)Creating path for build "$BUILD_DIR" and "$OUTPUT_DIR 2>&1 | tee $LOG_TXT -a
        mkdir -p $BUILD_DIR
        mkdir -p $OUTPUT_DIR

        echo "🔶 Preparing CMake..." 2>&1 | tee $LOG_TXT -a

        cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=$OUTPUT_DIR -DCMAKE_ARCHIVE_OUTPUT_DIRECTORY=$OUTPUT_DIR -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=$OUTPUT_DIR -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX $TOOLCHAIN_ARGUMENT -S . -B $BUILD_DIR --debug-output 2>&1 | tee $MAKE_TXT -a
                
        echo "🔶 Running build CMake..." 2>&1 | tee $LOG_TXT -a

        if [[ ${{ runner.os }} == "Windows" ]]; then 
            cmake --build $BUILD_DIR --target ALL_BUILD --config $BUILD_TYPE ${{ inputs.extra_flags }} -v 2>&1 | tee $MAKE_TXT -a
        else 
            cmake --build $BUILD_DIR ${{ inputs.extra_flags }} -v 2>&1 | tee $MAKE_TXT -a
        fi
        
        echo "🔶 End!" 2>&1 | tee $LOG_TXT -a

        echo ============================== STEP: Upload and save ==============================

    - name: Save build
      uses: actions/upload-artifact@main
      with:
        name: ${{ inputs.artifact_name }}
        path: ${{ env.BUILD_DIR }}

    - if: ${{ inputs.upload_logs == 'true' && always() }}
      name: Save logs
      uses: actions/upload-artifact@main
      with:
        name: ${{ inputs.artifact_name }}_logs
        path: |
          ${{ env.LOG_TXT }}
          ${{ env.MAKE_TXT }}
        
    - name: Finish summary with happy ending
      if: success()
      shell: bash
      run: |
        echo "#### The run ended with no issues ;P" >> $GITHUB_STEP_SUMMARY

    - name: Log errors if no success instead
      if: failure()
      shell: bash
      run: |
        echo "### THE RUN ENDED WITH ISSUES! Check the log!" >> $GITHUB_STEP_SUMMARY
    - name: Upload everything on debug
      if: ${{ inputs.debug_everything == 'true' && always() }}
      uses: actions/upload-artifact@main
      with:
        name: ${{ inputs.artifact_name }}_full_debug_upload
        path: ${{ github.workspace }}
