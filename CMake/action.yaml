name: 'CMake ready reusable action made by Lohk'
description: 'Made to build CMake projects for Linux, Windows and/or MacOS'
inputs:
  build_configuration:
    description: 'Release or Debug?'
    required: false
    default: 'Release'
  checkout:
    description: 'Should this checkout the project automagically?'
    required: false
    default: 'false'
  project_path:
    description: 'Project path to work on?'
    required: false
  upload_logs:
    description: 'Upload logs?'
    required: false
    default: 'false'
  artifact_name:
    description: 'How to name this project outputs as Artifacts? (Logs will be called (this)_logs)'
    required: true
  extra_flags:
    description: 'Put more flags to cmake build? (like "--trace")'
    required: false
    default: ''
  use_vcpkg:
    description: 'Downloads, builds latest vcpkg and installs it'
    required: false
    default: 'false'
  cmake_vcpkg_easy:
    description: 'Auto add config to CMake for VCPKG. Needs use_vcpkg enabled'
    required: false
    default: 'true'
    
  
runs:
  using: composite
  steps:
    - name: Put title for summary
      shell: bash
      run: |
        echo ============================== STEP: Summary and build setup ==============================
        echo "## 🌝 LunarisLib/actions/CMake" >> $GITHUB_STEP_SUMMARY

        echo "*This is the log output for this action:*" >> $GITHUB_STEP_SUMMARY
        echo "- Kind of build: ${{ inputs.build_configuration }}" >> $GITHUB_STEP_SUMMARY
        echo "- Project path: ${{ inputs.project_path }}" >> $GITHUB_STEP_SUMMARY
        echo "- Artifact name: ${{ inputs.artifact_name }}" >> $GITHUB_STEP_SUMMARY

    - name: Checkout if requested
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@main
      with:
        submodules: 'true'
        
    - name: Setup MSVC if needed (automatic)
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    - name: Append VCPKG to CMakeLists.txt automagically
      if: ${{ inputs.use_vcpkg == 'true' && inputs.cmake_vcpkg_easy == 'true' }}
      shell: bash
      env:
        WORK_PATH: ${{ inputs.project_path }}
      run: |
        echo ============================== STEP: VCPKG stuff ==============================
        PROJECT_PATH='${{ github.workspace }}'"/$WORK_PATH/"

        echo "Accessing $PROJECT_PATH..."

        cd $PROJECT_PATH

        echo "Working on new CMakeLists.txt..."
        
        echo "if (WIN32)" >> CMakeLists_new.txt
        echo "  set(VCPKG_TARGET_TRIPLET \"x64-windows\" CACHE STRING \"\")" >> CMakeLists_new.txt
        echo "elseif(UNIX AND NOT APPLE)" >> CMakeLists_new.txt
        echo "  set(VCPKG_TARGET_TRIPLET \"x64-linux\" CACHE STRING \"\")" >> CMakeLists_new.txt
        echo "else()" >> CMakeLists_new.txt
        echo "  set(VCPKG_TARGET_TRIPLET \"arm64-osx\" CACHE STRING \"\")" >> CMakeLists_new.txt
        echo "endif()" >> CMakeLists_new.txt

        cat CMakeLists.txt >> CMakeLists_new.txt

        echo "Shuffling stuff around..."

        mv CMakeLists.txt CMakeLists_old.txt
        mv CMakeLists_new.txt CMakeLists.txt

        echo "Your new CMakeLists.txt:"
        echo "========================================="
        cat CMakeLists.txt
        echo "========================================="

        cd '${{ github.workspace }}'  
        echo "Good!"
      
    - name: Using VCPKG
      if: ${{ inputs.use_vcpkg == 'true' }}
      id: install-vcpkg
      shell: bash
      env:
        WORK_PATH: ${{ inputs.project_path }}
      run: |
        PROJECT_PATH='${{ github.workspace }}'"/$WORK_PATH/"
        echo "- Using VCPKG!" >> $GITHUB_STEP_SUMMARY

        echo "Cloning vcpkg to "'${{ github.workspace }}'"/vcpkg"

        git clone https://github.com/microsoft/vcpkg.git '${{ github.workspace }}'/vcpkg
                
        echo "VCPKG_ROOT=\""'${{ github.workspace }}'"/vcpkg\"" >> $GITHUB_ENV
        echo '${{ github.workspace }}'"/vcpkg" >> $GITHUB_PATH

        echo "Current GITHUB_PATH: $GITHUB_PATH"
        echo "Current PATH: $PATH"
        echo "Setup..."

        cd '${{ github.workspace }}'/vcpkg
        
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then

          ./bootstrap-vcpkg.sh -disableMetrics
          export PATH='${{ github.workspace }}'"/vcpkg:$PATH"

        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then

          ./bootstrap-vcpkg.sh -disableMetrics
          export PATH='${{ github.workspace }}'"/vcpkg:$PATH"

        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then

          ./bootstrap-vcpkg.bat -disableMetrics
          export PATH='${{ github.workspace }}'"/vcpkg;$PATH"

        fi

        echo "Installing packages..."

        cd $PROJECT_PATH
        '${{ github.workspace }}'/vcpkg/vcpkg install 2>&1 | tee runner.txt -a;
        cd '${{ github.workspace }}'

        echo "Environment export (hopefully it works)..."
        
        export TOOLCHAIN_ARGUMENT=-DCMAKE_TOOLCHAIN_FILE='${{ github.workspace }}'"/vcpkg/scripts/buildsystems/vcpkg.cmake"

        echo "Good!"

    - name: Build Cmake manually
      shell: bash
      env:
        BUILD_DIR: build/${{ inputs.artifact_name }}
        OUTPUT_DIR: built_executables/${{ inputs.artifact_name }}
        LOGS_DIR: logs/${{ inputs.artifact_name }}
        BUILD_TYPE: ${{ inputs.build_configuration }}
        WORK_PATH: ${{ inputs.project_path }}
      run: |
        echo ============================== STEP: Building CMake ==============================

        cd $WORK_PATH        
        
        if [[ ${{ runner.os }} == "Windows" ]]; then
            P_BUILD=$(echo "${{ runner.workspace }}" | sed 's/\\/\//g')/$BUILD_DIR
            P_EXECS=$(echo "${{ runner.workspace }}" | sed 's/\\/\//g')/$OUTPUT_DIR
            P_LOGGS=$(echo "${{ runner.workspace }}" | sed 's/\\/\//g')/$LOGS_DIR
            CC=cl
            CXX=cl
        elif [[ ${{ runner.os }} == "macOS" ]]; then
            P_BUILD=${{ runner.workspace }}/$BUILD_DIR;
            P_EXECS=${{ runner.workspace }}/$OUTPUT_DIR;
            P_LOGGS=${{ runner.workspace }}/$LOGS_DIR;
            CC=clang
            CXX=clang++
        else
            P_BUILD=${{ runner.workspace }}/$BUILD_DIR;
            P_EXECS=${{ runner.workspace }}/$OUTPUT_DIR;
            P_LOGGS=${{ runner.workspace }}/$LOGS_DIR;
            CC=gcc
            CXX=g++
        fi    
        
        echo "Cleaning up paths [$P_BUILD; $P_EXECS, $P_LOGGS]";
        rm -rf $P_BUILD;
        rm -rf $P_EXECS;
        rm -rf $P_LOGGS;

        echo "(Re)Creating paths [$P_BUILD; $P_EXECS, $P_LOGGS]";
        mkdir -p $P_BUILD;
        mkdir -p $P_EXECS;
        mkdir -p $P_LOGGS;


        echo "Preparing CMake..."

        cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DRUNTIME_OUTPUT_DIRECTORY="$P_EXECS" -DCMAKE_C_COMPILER="$CC" -DCMAKE_CXX_COMPILER="$CXX" $TOOLCHAIN_ARGUMENT -S . -B "$P_BUILD" --debug-output 2>&1 | tee runner.txt -a;   
                
        echo "Running build CMake..."


        if [[ ${{ runner.os }} == "Windows" ]]; then 
            cmake --build $P_BUILD --target ALL_BUILD --config $BUILD_TYPE ${{ inputs.extra_flags }} -v 2>&1 | tee runner.txt -a;

            echo "Searching for build executables (.exe)..."

            find $P_BUILD -perm -111 -type f | grep -E ".*[\.exe]$|.*[\.dll]$" | grep -v -E ".*CompilerIdCXX\.exe$|.*CompilerIdC\.exe$|.*[\.pl]$" > execs.txt
        else 
            cmake --build $P_BUILD ${{ inputs.extra_flags }} -v 2>&1 | tee runner.txt -a;

            echo "Searching for build executables (matches)..."

            cat runner.txt | grep Built | awk '{print $NF}' > raw_execs.txt;
            cp raw_execs.txt ${{ runner.workspace }}/logs 

            # Filters .out and .bin and also filters by build output
            find $P_BUILD -perm -111 -type f | grep -v -E ".*[\.out]$|.*[\.bin]$" | grep $(<raw_execs.txt) > execs.txt
        fi


        echo "Copying executables:"
        cat execs.txt

        cp $(<execs.txt) $P_EXECS || true


        echo "Copying logs..."

        cp execs.txt $P_LOGGS
        cp runner.txt $P_LOGGS
        
        echo "End!"

        echo ============================== STEP: Upload and save ==============================

    - name: Save build
      uses: actions/upload-artifact@main
      with:
        name: ${{ inputs.artifact_name }}
        path: ${{ runner.workspace }}/built_executables/${{ inputs.artifact_name }}/

    - if: ${{ inputs.upload_logs == 'true' && always() }}
      name: Save logs
      uses: actions/upload-artifact@main
      with:
        name: ${{ inputs.artifact_name }}_logs
        path: ${{ runner.workspace }}/logs/${{ inputs.artifact_name }}/
        
    - name: Finish summary with happy ending
      if: success()
      shell: bash
      run: |
        echo "#### The run ended with no issues ;P" >> $GITHUB_STEP_SUMMARY
        
    - name: Log errors if no success instead
      if: failure()
      shell: bash
      run: |
        echo "### The run ended with issues! Check the log!" >> $GITHUB_STEP_SUMMARY