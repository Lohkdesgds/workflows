name: 'CMake ready reusable action made by Lohk'
description: 'Made to build CMake projects for Linux, Windows and/or MacOS'
inputs:
  build_configuration:
    description: 'Release or Debug?'
    required: false
    default: 'Release'
  checkout:
    description: 'Should this checkout the project automagically?'
    required: false
    default: 'false'
  project_path:
    description: 'Different path to work on?'
    required: false
  
runs:
  using: composite
  steps:
    - name: Checkout if requested
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@main
      with:
        submodules: 'true'
        
    # self test if it is windows
    - name: Setup MSVC if needed
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    #- name: Setup Ninja
    #  uses: ashutoshvarma/setup-ninja@master
      
    - name: Build Cmake manually
      shell: bash
      env:
        BUILD_DIR: ./build
        #CONFIGURE_OPTIONS: 
        #cc: ${{ matrix.config.cc }} # -DCMAKE_C_COMPILER=$CC -- instead, set in your project! (like probably "set(CMAKE_C_COMPILER gcc CACHE STRING "C compiler" FORCE)")
        #cxx: ${{ matrix.config.cxx }} # -DCMAKE_CXX_COMPILER=$CXX -- instead, set in your project! (like probably "set(CMAKE_CXX_COMPILER g++ CACHE STRING "C++ compiler" FORCE)")
        OUTPUT_DIRECTORY: ./built_executables
        BUILD_TYPE: ${{ inputs.build_configuration }}
        WORK_PATH: ${{ inputs.project_path }}
      run: |
        cd $WORK_PATH
        mkdir $BUILD_DIR
        cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DRUNTIME_OUTPUT_DIRECTORY=$OUTPUT_DIRECTORY -S . -B $BUILD_DIR 

        if [[ ${{ runner.os }} == "Windows" ]]; then 
            cmake --build $BUILD_DIR --target ALL_BUILD --config $BUILD_TYPE > runner.txt;
            mkdir ${{ runner.workspace }}/executables;
            cp $BUILD_DIR/*/* ${{ runner.workspace }}/executables;
        else 
            cmake --build $BUILD_DIR > runner.txt;
            cat runner.txt | grep Built | awk '{print $NF}' > execs.txt;
            cp execs.txt ${{ runner.workspace }}/logs  

            for file in $(<execs.txt); do
              cp "$BUILD_DIR/$file" ${{ runner.workspace }}/executables;
            done;
        fi

        cp runner.txt ${{ runner.workspace }}/logs  
        
    - name: Save logs
      uses: actions/upload-artifact@main
      with:
        name: logs_${{ runner.os }}
        path: ${{ runner.workspace }}/logs

    - name: Save build
      uses: actions/upload-artifact@main
      with:
        name: build_${{ runner.os }}
        path: ${{ runner.workspace }}/executables