name: 'CMake ready reusable action made by Lohk'
description: 'Made to build CMake projects for Linux, Windows and/or MacOS'
inputs:
  build_configuration:
    description: 'Release or Debug?'
    required: false
    default: 'Release'
  checkout:
    description: 'Should this checkout the project automagically?'
    required: false
    default: 'false'
  project_path:
    description: 'Project path to work on?'
    required: false
  upload_logs:
    description: 'Upload logs?'
    required: false
    default: 'false'
  artifact_name:
    description: 'How to name this project outputs as Artifacts? (Logs will be called (this)_logs'
    required: true
    
  
runs:
  using: composite
  steps:
    - name: Checkout if requested
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@main
      with:
        submodules: 'true'
        
    # self test if it is windows
    - name: Setup MSVC if needed
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    #- name: Setup Ninja
    #  uses: ashutoshvarma/setup-ninja@master
      
    - name: Build Cmake manually
      shell: bash
      env:
        BUILD_DIR: build/${{ inputs.artifact_name }}
        OUTPUT_DIR: built_executables/${{ inputs.artifact_name }}
        LOGS_DIR: logs/${{ inputs.artifact_name }}
        BUILD_TYPE: ${{ inputs.build_configuration }}
        WORK_PATH: ${{ inputs.project_path }}
      run: |
        cd $WORK_PATH
        
        if [[ ${{ runner.os }} == "Windows" ]]; then
            P_BUILD=$(echo "${{ runner.workspace }}" | sed 's/\\/\//g')/$BUILD_DIR
            P_EXECS=$(echo "${{ runner.workspace }}" | sed 's/\\/\//g')/$OUTPUT_DIR
            P_LOGGS=$(echo "${{ runner.workspace }}" | sed 's/\\/\//g')/$LOGS_DIR
        else
            P_BUILD=${{ runner.workspace }}/$BUILD_DIR;
            P_EXECS=${{ runner.workspace }}/$OUTPUT_DIR;
            P_LOGGS=${{ runner.workspace }}/$LOGS_DIR;
        fi    
        
        echo "Cleaning up paths [$P_BUILD; $P_EXECS, $P_LOGGS]";
        rm -rf $P_BUILD;
        rm -rf $P_EXECS;
        rm -rf $P_LOGGS;

        echo "(Re)Creating paths [$P_BUILD; $P_EXECS, $P_LOGGS]";
        mkdir -p $P_BUILD;
        mkdir -p $P_EXECS;
        mkdir -p $P_LOGGS;

        echo "Preparing CMake..."

        cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DRUNTIME_OUTPUT_DIRECTORY="$P_EXECS" -S . -B "$P_BUILD"
                
        echo "Running build CMake..."

        if [[ ${{ runner.os }} == "Windows" ]]; then 
            cmake --build "$P_BUILD" --target ALL_BUILD --config $BUILD_TYPE > runner.txt;
            cat runner.txt

            cp $P_BUILD/*/*.exe "$P_EXECS/";
        else 
            cmake --build $P_BUILD > runner.txt;
            cat runner.txt

            cat runner.txt | grep Built | awk '{print $NF}' > execs.txt;
            cp execs.txt ${{ runner.workspace }}/logs  

            for file in $(<execs.txt); do
              cp "$P_BUILD/$file" "$P_EXECS/";
            done;
        fi

        cp runner.txt "$P_LOGGS/"
        
        echo "End!"

    - name: Save build
      uses: actions/upload-artifact@main
      with:
        name: ${{ inputs.artifact_name }}
        path: ${{ runner.workspace }}/built_executables/${{ inputs.artifact_name }}/

    - if: ${{ inputs.upload_logs == 'true' }}
      name: Save logs
      uses: actions/upload-artifact@main
      with:
        name: ${{ inputs.artifact_name }}_logs
        path: ${{ runner.workspace }}/logs/${{ inputs.artifact_name }}/
        

# Use only in case of debug:
#    - name: Save build
#      uses: actions/upload-artifact@main
#      with:
#        name: build_${{ runner.os }}
#        path: ${{ runner.workspace }}/