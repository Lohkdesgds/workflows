name: 'Publisher helper that creates a changelog to append automatically'
description: 'Works on any platform. Clears your path, so you''ll have to checkout again!'
inputs:
  kind:
    description: "A command: ['M' for Major bump, 'm' for minor bump, 'r' for revision bump, 'rc' for release candidate bump, 'snapshot' for snapshot versioning]"
    required: true
    

runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Versioning
      shell: bash
      env:
        TEMP_FOLDER: '___bkp'
        VERSIONING_FOLDER: '___versioning'
        VERSIONING_BRANCH: '_versioning'
        EMAIL: lunaris.versioning@lib.com
        USERNAME: Lunaris Lib Versioning Action
      run: |
        printf "🌝 --> Configuring user and token...\n"

        git config --global user.email "$EMAIL"
        git config --global user.name "$USERNAME"
        git remote set-url origin https://${{ github.token }}@github.com/${{ github.repository }}.git
                        
        printf "🌝 --> Fetching branches...\n"

        git fetch -a -p
        
        printf "🌝 --> Checking branches info...\n"
        
        FIND_BRANCH=$(git ls-remote --heads origin refs/heads/$VERSIONING_BRANCH)

        printf "🌝 --> Moving things around...\n"

        ORIGINAL_FILES=$(ls -A)
        mkdir -p $TEMP_FOLDER
        mv $ORIGINAL_FILES $TEMP_FOLDER

        cp -a "$TEMP_FOLDER/.git" ./
        printf "$TEMP_FOLDER/" > .gitignore
                
        printf "🌝 --> Checking out branch...\n"

        git checkout --orphan $VERSIONING_BRANCH
        
        printf "🌝 --> Working on branch info...\n"

        if [[ -n "$FIND_BRANCH" ]]; then 
            printf "🌝 --> Branch exists, pull...\n"
            git pull origin $VERSIONING_BRANCH
            cd $VERSIONING_FOLDER
        else
            printf "🌝 --> New branch! Working on it\n"

            mkdir $VERSIONING_FOLDER
            cd $VERSIONING_FOLDER

            printf "1" > major.txt
            printf "0" > minor.txt
            printf "0" > revision.txt
            printf "1" > release-candidate.txt
            printf "24w01a" > snapshot.txt
            printf "0" > commit_counter.txt
        fi
        
        printf "🌝 --> Couting commits...\n"

        printf "%llu" $(($(<commit_counter.txt) + 1)) > commit_counter.txt
        
        printf "🌝 --> Commiting...\n"

        cd ..
        
        git add .
        git status
        git commit -m "[LunarisLib/Versioning] Versioning on orphan branch."
        
        printf "🌝 --> Pushing...\n"

        git push -u origin $VERSIONING_BRANCH        
        
        printf "🌝 --> Moving things back...\n"
        
        rm -rf $VERSIONING_FOLDER
        rm -rf .git
        rm .gitignore
        mv $(ls -A "$TEMP_FOLDER" | sed -e 's/^/'"$TEMP_FOLDER"'\//') .
        
        printf "🌝 --> Everything should be back at last state now!\n"